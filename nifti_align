#!/usr/bin/env bash

APREFIX="a_"
KEEP_TRANS=false
KEEP_OUT=false
AFNI_ALIGN_SS=false
AFNI_ALIGN_COST=lpc
#VERBOSE_STR='/dev/null'
declare -a AFNI_ALIGN_NN=()
declare -a AFNI_ALIGN_LIN=()
# Default template. Shifted origin to center ACPC as opposed to default AC origin. (So that the head is centered in the image)
AFNI_ALIGN_TEMPLATE="/home/jagust/adni/pipeline_scripts/Templates_ROIs/MNI_Templates_and_More/TT_N27_brainmask.nii"

# A good full head template: /home/jagust/tjward/Templates/spmdefault_1mm_MNI_avg152T1.nii


while test $# -gt 0; do
  case "$1" in
    -h|--help)
      echo " "
      echo "#   ***********************"
      echo "#   *** Nifty Align Tool **"
      echo "#   ***********************"
      echo "#   "
      echo "#   Align nifti images to a template using rigid transformation"
      echo "#   "
      echo "#   Do not use periods (.) in image names, all text after the first (.) is treated as an extension"
      echo "#   "
      echo "#   Some more comments are available in the script. This isn't well written or anything."
      echo "#   A better approach would be re-writing @auto_tlrc which is itself a wraper of AFNI tools"
      echo "#   This is better than using 3dwarpdrive or other registration tools I have found because it uses"
      echo "#   Nonlinear warping to find the alignment, then it estimates a rigid-body transformation to fit"
      echo "#   "
      echo "#   All credit goes to the AFNI team, this is just a dumb script to automate a few things."
      echo "#   -tjw (07-2021)"
      echo "#    "
      echo "      options:"
      echo "      -h, --help                    Show brief help"
      echo "      -i, --input       <path>      Input T1 (brainmask)"
      echo "         *--skullstrip*             *Don't use* Skull strip flag (optional)"
      echo "                                      Does not work well and adds too much time."
      echo "                                      Use template with skull instead"
      echo "                                      Example: spmdefault_1mm_MNI_avg152T1.nii"
      echo "          --template    <path>      Template to align to (optional)"
      echo "                                      Default template is skullstripped TT_N27_brainmask.nii"
      echo "                                      Either SS your input or use SS'd vol"
      echo "                                      SS alignment is more accurate/reliable."
      echo "      -n, --nearest     <path>      Reslice img with NN"
      echo "      -l, --linear      <path>      Reslice img with trilinear"
      echo "          --keepmat                 Keep the afni transformation matrix"
      echo "          --prefix      <str>       Prefix for output (default: 'a_')"
      echo "          --nmi                     NMI cost funct. Default is lpc, good for T1w"
      echo "                                      Good for PET alignment"
      echo "                                    AFNI offers many good cost functions, just edit the"
      echo "                                      script if you want to use a different one"
      #echo "          --verbose                 Show afni tool output"
      echo ""
      exit 0
      ;;
    -i)
      shift
      if test $# -gt 0; then
        export AFNI_ALIGN_INPUT=$1
      else
        echo "no process specified"
        exit 1
      fi
      shift
      ;;
    --input)
      shift
      export AFNI_ALIGN_INPUT=`echo $1 | sed -e 's/^[^=]*=//g'`
      shift
      ;;
    -n)
      shift
      if test $# -gt 0; then
	    export AFNI_ALIGN_NN+=($1)
      fi
      shift
      ;;
    --nearest*)
      shift
      export AFNI_ALIGN_NN+=(`echo $1 | sed -e 's/^[^=]*=//g'`)
      shift
      ;;
    -l)
      shift
      if test $# -gt 0; then
	    export AFNI_ALIGN_LIN+=($1)
      fi
      shift
      ;;
    --linear*)
      shift
      export AFNI_ALIGN_LIN+=(`echo $1 | sed -e 's/^[^=]*=//g'`)
      shift
      ;;
    -t)
      shift
      if test $# -gt 0; then
            export AFNI_ALIGN_TEMPLATE=($1)
      fi
      shift
      ;;
    --template*)
      shift
      export AFNI_ALIGN_TEMPLATE=(`echo $1 | sed -e 's/^[^=]*=//g'`)
      shift
      ;;
    --prefix*)
      shift
      export PREFIX=(`echo $1 | sed -e 's/^[^=]*=//g'`)
      shift
      ;;
    --nmi)
      export AFNI_ALIGN_COST="nmi"
      shift
      ;;
    --skullstrip)
      export AFNI_ALIGN_SS=true
      shift
      ;;
    --keepmat)
      export KEEP_TRANS=true
      shift
      ;;
    #--verbose)
    #  export VERBOSE_STR="&1"
    #  shift
    #  ;;
    *)
      break
      ;;
  esac
done

# Read our the input args:
echo "Input: $AFNI_ALIGN_INPUT"
if [ ! -f "$AFNI_ALIGN_INPUT" ]; then
    echo "ERROR: $AFNI_ALIGN_INPUT does not exist."
    exit
fi

echo "Skullstrip: $AFNI_ALIGN_SS"

echo "Template: $AFNI_ALIGN_TEMPLATE"
if [ ! -f "$AFNI_ALIGN_TEMPLATE" ]; then
    echo "ERROR: $AFNI_ALIGN_TEMPLATE does not exist."
    exit
fi

for ELEMENT in ${AFNI_ALIGN_NN[@]}
do
echo "Nearest: $ELEMENT"
if [ ! -f "$ELEMENT" ]; then
    echo "ERROR: $ELEMENT does not exist."
    exit
fi
done

for ELEMENT in ${AFNI_ALIGN_LIN[@]}
do
echo "Bilinear: $ELEMENT"
if [ ! -f "$ELEMENT" ]; then
    echo "ERROR: $ELEMENT does not exist."
    exit
fi
done

echo "Keep matrix: $KEEP_TRANS"
echo "Prefix: $PREFIX"

# get some info about the input file. I'm going to copy it to a tmp img so that I can modify its header info without consequence.
fullname="${AFNI_ALIGN_INPUT##*/}"
dirname="${AFNI_ALIGN_INPUT%/*}"
inbasename="${fullname%.*}"
extension="${fullname##*.}"
if [ "$dirname" == "$AFNI_ALIGN_INPUT" ]; then
  dirname="."
fi
if [ "$extension" == "$inbasename" ]; then
  extension=""
fi

# Enter dir of input
cd $dirname

### If we run into issues with nifti image auto-interpreted as +tlrc, not creating +orig data, we can do the below
## Lets put the input into orig space if not already.
## Output is also orig space, as we only rigid align, no warp/strech/pull/etc
#cp $AFNI_ALIGN_INPUT $dirname/.tmp_$fullname
#AFNI_ALIGN_INPUT_cp=$dirname/.tmp_$fullname
#3drefit -space ORIG $AFNI_ALIGN_INPUT_cp

if [ "$AFNI_ALIGN_SS" = true ] ; then
	# Below allows for nmi cost func for aligning vols like PET
	@auto_tlrc -rigid_equiv -base $AFNI_ALIGN_TEMPLATE -warp_orig_vol -init_xform AUTO_CENTER_CM -pad_input 25 -dxyz 1 -no_pre -overwrite -prefix .tmp_$inbasename -input $AFNI_ALIGN_INPUT
else
	@auto_tlrc -rigid_equiv -base $AFNI_ALIGN_TEMPLATE -no_pre -no_ss -overwrite -init_xform AUTO_CENTER_CM -pad_input 25 -3dAlcost $AFNI_ALIGN_COST -prefix .tmp_$inbasename -input $AFNI_ALIGN_INPUT
fi

mv .tmp_${inbasename}.Xat.rigid.1D ${inbasename}.Xat.rigid.1D
echo "Delete:"
ls .tmp_${inbasename}*
rm .tmp_${inbasename}*
echo ""
for img in "${AFNI_ALIGN_NN[@]}"
do
	imgbasename=$(basename "$img" | cut -d. -f1)
	3dAllineate -1Dmatrix_apply ${inbasename}.Xat.rigid.1D -master $AFNI_ALIGN_INPUT -final NN  -prefix .tmp_${imgbasename} -overwrite $img
	3dAFNItoNIFTI .tmp_${imgbasename}+orig 
	mv .tmp_${imgbasename}.nii $APREFIX${imgbasename}.nii
	# Cleanup extra afni files
	echo "Deleting *${basename}_tmp*"
	echo "Delete:"
	ls .tmp_${imgbasename}*
	rm .tmp_${imgbasename}*
	echo ""
done

for img in "${AFNI_ALIGN_LIN[@]}"
do
        imgbasename=$(basename "$img" | cut -d. -f1)
        3dAllineate -1Dmatrix_apply ${inbasename}.Xat.rigid.1D -master $AFNI_ALIGN_INPUT -final linear  -prefix .tmp_${imgbasename} -overwrite $img
	3dAFNItoNIFTI .tmp_${imgbasename}+orig
        mv .tmp_${imgbasename}.nii $APREFIX${imgbasename}.nii
        # Cleanup extra afni files
        echo "Deleting *${basename}_tmp*"
        echo "Delete:"
        ls .tmp_${imgbasename}*
	rm .tmp_${imgbasename}*
        echo ""
done

if [ "$KEEP_TRANS" = false ] ; then
	echo "Removing transformation matrix"
	rm ${inbasename}.Xat.rigid.1D
fi

# If afni is interupted/errors, these tmp files can be left on the disk.
# Here, I clean them.
echo "Cleaning tmp files"
if compgen -G "__ats_tmp__*" > /dev/null; then
    rm __ats_tmp__*
fi
if compgen -G "pre.${inbasename}_XYZ_*" > /dev/null; then
	rm pre.${inbasename}_XYZ_*
fi
if compgen -G "${inbasename}*_shft.1D" > /dev/null; then
        rm ${inbasename}*_shft.1D*
fi

echo "Done"

